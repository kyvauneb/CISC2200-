Script started on Sat 17 Dec 2016 11:05:54 PM EST
]0;kyvaunebrammer@storm:~/CISC2200/Maze[kyvaunebrammer@storm Maze]$ pwd
/home/students/FALL15/kyvaunebrammer/CISC2200/Maze
]0;kyvaunebrammer@storm:~/CISC2200/Maze[kyvaunebrammer@storm Maze]$ cat maze.h maze.cpp driver.cpp
/*
 * Kyvaune Brammer
 *
 * CISC2200 - Papadakis
 *
 * Maze Extra Credit
 *
 */


#ifndef MAZE_H
#define MAZE_H

#include <iostream>
using namespace std;

static const int ROWS = 4;
static const int COLUMNS = 5;

class Maze {
 
  public:
	  Maze();

	  void printMaze();
	  
	  void writeBlockedPositions();
	  void writeExit();

	  char getCell(int r, int c);
	  void setCell(int r, int c, char m);
	  bool backTrack(int r, int c);

  private:
	  char maze[ROWS] [COLUMNS];
	  char character;
};

#endif
/*
 * Kyvaune Brammer
 *
 */

#include <iostream>
#include "maze.h"

using namespace std;

Maze::Maze() {

	character = '0';

	for (int i = 0; i < ROWS; i++) {

		for (int j = 0; j < COLUMNS; j++) {

			maze[i][j] = character;
		}
	}
	writeBlockedPositions();
	writeExit();
}

void Maze::printMaze() {

	for (int i = 0; i < ROWS;i++) {
		cout << "+---+---+---+---+---+" << endl;

		for (int j=0; j < COLUMNS; j++) {
			cout << "| " << maze[i][j] << " ";
		}
		cout << "|" << endl;
	}
	cout << "+---+---+---+---+---+" << endl;
}

void Maze::writeBlockedPositions() {

	char blockedPosition = '+';

	// NOTE: Blocked positions are (1,4), (2,4), (3,4), (3,3), (3,1), (3,0), (1,1), (0,2)

	maze[1][4] = blockedPosition;

	maze[2][4] = blockedPosition;

	maze[3][4] = blockedPosition;

	maze[3][3] = blockedPosition;

	maze[3][1] = blockedPosition;

	maze[3][0] = blockedPosition;

	maze[1][1] = blockedPosition;

	maze[0][2] = blockedPosition;

}

void Maze::writeExit() {

	maze[0][3] = 'E';
}

void Maze::setCell(int r, int c, char m) {

	maze[r][c] = m;
}

char Maze::getCell(int r, int c) {

	char cell = maze[r][c];
	return cell;

}
bool Maze::backTrack(int r, int c) {

	if (getCell(r, c) == 'E') {
		return true;
	}
	else if (r < 0 || c < 0 || r >= ROWS || c >= COLUMNS) {
		cout << "Cell " << r << ", " << c << " doesn't exit this maze"  << endl;
		return false;
	}
	else if (getCell(r, c) == '+') {
		cout << "Blocked position: " << r << ", " << c << endl;
		return false;
	}
	else if (getCell( r, c ) == '$') {
		cout << "Position already visited:  " << r << ", " << c << endl;
		return false;
	}
	else {
		setCell(r, c, '$');

		if (backTrack( (r + 1), (c) ) == true) {
			return true;
		}
		else if ( backTrack( (r - 1), (c) ) == true) {
			return true;
		}
		else if ( backTrack( (r), (c + 1) ) == true) {
			return true;
		}
		else if ( backTrack( (r), (c - 1) ) == true) {
			return true;
		}
		else {
			return false;
		}
	}
}
/*
 * Kyvaune Brammer
 *
 * MAZE DRIVER
 *
 */

#include <iostream>
#include "maze.h"

using namespace std;

int main() {

	int row, col;
	char start = 'M';
	bool validEntry;
	Maze Maze;

	Maze.printMaze();

	while (validEntry == false) {

		cout << "Enter the row from 0 to " << ROWS - 1 << ":(0 = Row1, 1= Row2, etc) ";
		cin >> row;

		cout << "Now enter the column from 0 to " << COLUMNS - 1 << ":(0 = Column1, 1 = Column2, etc) ";
		cin >> col;
	
		if (Maze.getCell(row, col) != '+') {
			Maze.setCell(row, col, start);
			validEntry = true;
			cout << endl << endl;
		}
		else {
			cout << "Not a valid position, try again." << endl << endl;
		}
	}

	if (Maze.backTrack(row, col) == true) {
		cout << "You found a way out!!!" << endl;
	}
	else {
		cout << "No exit found, please try again!" << endl;
	}
	Maze.printMaze();
}
]0;kyvaunebrammer@storm:~/CISC2200/Maze[kyvaunebrammer@storm Maze]$ g[Kcat maze.h maze.cpp driver.cpppwd[Kvi stack.cpp[2Phls[Kcd Stackls[Kvi stack.hcpppwd[Kcat maze.h maze.cpp driver.cpp[Kg++ maze.h maze.cpp driver.cpp
]0;kyvaunebrammer@storm:~/CISC2200/Maze[kyvaunebrammer@storm Maze]$ ./a.out
+---+---+---+---+---+
| 0 | 0 | + | E | 0 |
+---+---+---+---+---+
| 0 | + | 0 | 0 | + |
+---+---+---+---+---+
| 0 | 0 | 0 | 0 | + |
+---+---+---+---+---+
| + | + | 0 | + | + |
+---+---+---+---+---+
Enter the row from 0 to 3:(0 = Row1, 1= Row2, etc) 0
Now enter the column from 0 to 4:(0 = Column1, 1 = Column2, etc) 1


Blocked position: 1, 1
Cell -1, 1 doesn't exit this maze
Blocked position: 0, 2
Blocked position: 3, 0
Position already visited:  1, 0
Blocked position: 3, 1
Blocked position: 1, 1
Cell 4, 2 doesn't exit this maze
Position already visited:  2, 2
Blocked position: 3, 3
Blocked position: 3, 1
Position already visited:  2, 2
Blocked position: 0, 2
Blocked position: 3, 3
Position already visited:  1, 3
Blocked position: 2, 4
Position already visited:  2, 2
You found a way out!!!
+---+---+---+---+---+
| $ | $ | + | E | 0 |
+---+---+---+---+---+
| $ | + | $ | $ | + |
+---+---+---+---+---+
| $ | $ | $ | $ | + |
+---+---+---+---+---+
| + | + | $ | + | + |
+---+---+---+---+---+
]0;kyvaunebrammer@storm:~/CISC2200/Maze[kyvaunebrammer@storm Maze]$ exit
exit

Script done on Sat 17 Dec 2016 11:07:06 PM EST
